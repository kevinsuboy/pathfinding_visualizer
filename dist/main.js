/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/lib/algos/algoParent.js":
/*!*************************************!*\
  !*** ./src/lib/algos/algoParent.js ***!
  \*************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/***/ ((module) => {

eval("class algoParent {\n    constructor(gridSize, initVal=0) {\n        this.initVal = initVal;\n        this.grid = new Array(gridSize[0]);\n        for (let i = 0; i < this.grid.length; i++) {\n            this.grid[i] = new Array(gridSize[1]);\n            for (let j = 0; j < gridSize[1]; j++)\n                this.grid[i][j] = initVal;\n        }\n        this.nodesToAnimate = [];\n        this.backtraceToAnimate = [];\n        // debugger\n        this.dir = [\n            [0, 1],\n            [-1, 0],\n            [0, -1],\n            [1, 0]\n        ];\n    }\n    genGrid() {\n        this.resetGrid();\n        //! Drop Stop\n        const stop = document.getElementsByClassName(\"stop\")[0].id.split(\"-\").map(el => parseInt(el));\n        this.grid[stop[0]][stop[1]] = \"s\";\n        // Drop Walls\n        const walls = document.getElementsByClassName(\"wall\");\n        for (let w of walls) {\n            let [x, y] = w.id.split(\"-\").map(el => parseInt(el));\n            this.grid[x][y] = -1;\n        }\n    }\n    resetGrid() {\n        for (let i = 0; i < this.grid.length; i++) {\n            for (let j = 0; j < this.grid[0].length; j++)\n                this.grid[i][j] = this.initVal;\n        }\n    }\n    execute(nodesToAnimate, queueToAnimate, backtraceToAnimate) {\n        // debugger\n        this.genSearch(nodesToAnimate,queueToAnimate);\n        this.getShortestPath(backtraceToAnimate);\n    }\n    move(pos, d) {\n        return [pos[0] + d[0], pos[1] + d[1]];\n    }\n    getSquare(pos) {\n        // debugger\n        return this.grid[pos[0]][pos[1]]\n    }\n    inBounds(pos) { return (pos[0] >= 0 && pos[0] < this.grid.length && pos[1] >= 0 && pos[1] < this.grid[0].length) }\n    notWall(pos){ return this.getSquare(pos) !== -1}\n    validMove(pos) {\n        if (this.inBounds(pos) && this.notWall(pos))\n            return this.getSquare(pos) === 0 || this.getSquare(pos) === \"s\";\n        return false;\n    }\n}\n\nmodule.exports = {\n    algoParent\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/algos/algoParent.js?");

/***/ }),

/***/ "./src/lib/algos/bfs.js":
/*!******************************!*\
  !*** ./src/lib/algos/bfs.js ***!
  \******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { algoParent } = __webpack_require__(/*! ./algoParent */ \"./src/lib/algos/algoParent.js\");\n\nclass BFS extends algoParent {\n    constructor(gridSize){\n        super(gridSize)\n    }\n    genSearch(nodesToAnimate,queueToAnimate){\n        this.genGrid();\n        let cur = document.getElementsByClassName(`start`)[0].id.split(\"-\").map(el=>parseInt(el));\n        let newPos = undefined;\n        const queue = [cur]; this.grid[cur[0]][cur[1]] = 1;\n        \n        while(queue.length > 0){\n            cur = queue.shift();\n            // debugger\n            nodesToAnimate.push(cur)\n            if (this.getSquare(cur) === \"s\"){\n                // debugger\n                this.grid[cur[0]][cur[1]] = this.maxCnt;\n                this.endPos = cur;\n                return true; // if done, exit\n            }\n            // if (this.getSquare(cur)!==\"s\") this.grid[cur[0]][cur[1]] = 1;\n            for(let d of this.dir){\n                newPos = this.move(cur, d);\n                // debugger\n                if(this.validMove(newPos)){\n                    if (this.getSquare(newPos) !== \"s\") { queueToAnimate.push(newPos); this.grid[newPos[0]][newPos[1]] = this.getSquare(cur)+1;}\n                    else this.maxCnt = this.getSquare(cur) + 1; \n                    queue.push(newPos);\n                }\n            }\n        }\n        // debugger\n        return false;\n    }\n    validBacktrace(pos, val){\n        if (this.inBounds(pos))\n            return this.getSquare(pos) === val-1;\n        return false;\n    }\n    getShortestPath(nodesToAnimate){\n        // debugger\n        if(!this.endPos) return false;\n        let newPos; let cur = this.endPos;\n        nodesToAnimate.unshift(cur);\n        while(this.getSquare(cur) !== 1){\n            // debugger\n            for(let d of this.dir){\n                newPos = this.move(cur, d);\n                if (this.validBacktrace(newPos, this.getSquare(cur))){\n                    nodesToAnimate.unshift(newPos);\n                    cur = newPos;\n                    break;\n                }\n            }\n        }\n        // debugger\n        return true;\n    }\n}\n\nmodule.exports = {\n    BFS\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/algos/bfs.js?");

/***/ }),

/***/ "./src/lib/algos/dfs.js":
/*!******************************!*\
  !*** ./src/lib/algos/dfs.js ***!
  \******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {shuffle} = __webpack_require__(/*! ../util/mathUtil */ \"./src/lib/util/mathUtil.js\")\nconst { algoParent } = __webpack_require__(/*! ./algoParent */ \"./src/lib/algos/algoParent.js\");\n\nclass DFS extends algoParent {\n    constructor(gridSize){\n        super(gridSize)\n    }\n    genSearch(nodesToAnimate,stackToAnimate){\n        this.nodesToAnimate = [];\n        this.genGrid();\n        let cur = document.getElementsByClassName(`start`)[0].id.split(\"-\").map(el=>parseInt(el));\n        let newPos = undefined;\n        const stack = [cur];\n        this.grid[cur[0]][cur[1]] = 1;\n        while(stack.length > 0){\n            cur = stack.pop();\n            nodesToAnimate.push(cur);\n            this.nodesToAnimate.push(cur);\n            if (this.getSquare(cur) === \"s\") {\n                this.grid[cur[0]][cur[1]] = this.maxCnt;\n                this.endPos = cur;\n                debugger\n                this.solved = true;\n                return true; // if done, exit\n            }\n            // this.grid[cur[0]][cur[1]] += 1;\n            shuffle(this.dir);\n            for (let d of this.dir) {\n                newPos = this.move(cur, d);\n                // debugger\n                if (this.validMove(newPos)) {\n                    if (this.getSquare(newPos) !== \"s\") {\n                        stackToAnimate.push(newPos);\n                        // this.grid[newPos[0]][newPos[1]] = this.getSquare(cur);\n                        this.grid[newPos[0]][newPos[1]] = 1;\n                    }\n                    // else this.maxCnt = this.getSquare(cur) + 1;\n                    stack.push(newPos);\n                    // break;\n                }\n            }\n        }\n        debugger\n        return false;\n    }\n    getShortestPath(nodesToAnimate){\n        debugger\n        if(this.solved) this.nodesToAnimate.forEach(el => nodesToAnimate.push(el))\n        return true;\n    }\n}\n\nmodule.exports = {\n    DFS\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/algos/dfs.js?");

/***/ }),

/***/ "./src/lib/algos/dijkstra.js":
/*!***********************************!*\
  !*** ./src/lib/algos/dijkstra.js ***!
  \***********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { algoParent } = __webpack_require__(/*! ./algoParent */ \"./src/lib/algos/algoParent.js\");\nconst { getQMin, getQStop, generateInt } = __webpack_require__(/*! ../util/mathUtil */ \"./src/lib/util/mathUtil.js\");\n\n\nclass Dijkstra extends algoParent {\n    constructor(gridSize) {\n        // super(gridSize, Number.MAX_SAFE_INTEGER)\n        super(gridSize)\n        // debugger\n    }\n    genEdges(){\n        this.edges = new Array(this.grid.length);\n        let newPos = undefined;\n        for (let i = 0; i < this.edges.length; i++) {\n            this.edges[i] = new Array(this.grid[0].length);\n            for (let j = 0; j < this.grid[0].length; j++){\n                this.edges[i][j] = new Array(4); //! E N W S\n                // debugger\n                for(let k=0;k<4;k++){\n                    newPos = this.move([i,j], this.dir[k]);\n                    if(this.validMove(newPos)){\n                        this.edges[i][j][k] = 1;\n                        // this.edges[i][j][k] = k+1;\n                        // this.edges[i][j][k] = generateInt(this.grid.length * this.grid[0].length)+1;\n                    }else{\n                        this.edges[i][j][k] = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n            }\n        }\n    }\n    genSearch(nodesToAnimate, queueToAnimate) {\n        this.genGrid();\n        this.genEdges();\n        let cur = document.getElementsByClassName(`start`)[0].id.split(\"-\").map(el => parseInt(el));\n        let newPos = undefined;\n        const queue = {[cur]: 1}; this.grid[cur[0]][cur[1]] = 1;\n        // debugger\n        let done = false;\n        \n        while (Object.keys(queue).length > 0) {\n            if (done) {\n                cur = getQStop(queue);\n                this.grid[cur[0]][cur[1]] = this.maxCnt;\n                this.endPos = cur;\n                debugger\n                return true; // if done, exit\n            }\n            cur = getQMin(queue);\n            // debugger\n            nodesToAnimate.push(cur)\n            // if (this.getSquare(cur)!==\"s\") this.grid[cur[0]][cur[1]] = 1;\n            for (let i=0;i<4;i++) {\n                let d = this.dir[i];\n                let e = this.edges[cur[0]][cur[1]][i];\n                newPos = this.move(cur, d);\n                if (e !== Number.MAX_SAFE_INTEGER && this.validMove(newPos)){ // valid edge and move\n                    // debugger\n                    if (this.getSquare(newPos) !== \"s\") { queueToAnimate.push(newPos); this.grid[newPos[0]][newPos[1]] = this.getSquare(cur) + e; }\n                    else {\n                        done = true;\n                        this.maxCnt = this.getSquare(cur) + e;\n                    }\n                    queue[newPos] = this.getSquare(newPos);\n                }\n            }\n        }\n        // debugger\n        return false;\n    }\n    validBacktrace(pos, val) {\n        if (this.inBounds(pos) && this.notWall(pos))\n            return this.getSquare(pos) !== 0 && this.getSquare(pos) <= val - 1;\n        return false;\n    }\n    getShortestPath(nodesToAnimate) {\n        debugger\n        if (!this.endPos) return false;\n        let newPos; let cur = this.endPos;\n        nodesToAnimate.unshift(cur);\n        while (this.getSquare(cur) !== 1) {\n            debugger\n            let min = Number.MAX_SAFE_INTEGER;\n            let res = undefined;\n            for (let d of this.dir) {\n                newPos = this.move(cur, d);\n                if (this.validBacktrace(newPos, this.getSquare(cur))) {\n                    if(this.getSquare(newPos) <= min){\n                        min = this.getSquare(newPos);\n                        res = newPos;\n                    }\n                }\n            }\n            nodesToAnimate.unshift(res);\n            cur = res;\n        }\n        // debugger\n        return true;\n    }\n}\n\nmodule.exports = {\n    Dijkstra\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/algos/dijkstra.js?");

/***/ }),

/***/ "./src/lib/animations/gridAnimations.js":
/*!**********************************************!*\
  !*** ./src/lib/animations/gridAnimations.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/***/ ((module) => {

eval("class gridAnimations {\n    constructor(speed, nodesToAnimate){\n        this.nodesToAnimate = nodesToAnimate;\n        this.speed = speed === \"fast\" ? 0 :\n                    speed === \"average\" ? 20 : 50;\n    }\n    animateInstant(type){\n        let cur;\n        for(let idx = 0; idx<this.nodesToAnimate.length; idx++){\n            let cur = this.nodesToAnimate[idx];\n            if (!cur) debugger\n            cur = document.getElementById(`${cur[0]}-${cur[1]}`);\n            switch(type){\n                case \"instantvisited\":\n                    cur.classList.remove(\"queued\");\n                    cur.classList.add(\"instantvisited\");\n                    break;\n                case \"instantpath\":\n                    cur.classList.add(\"instantpath\");\n                    break;\n                case \"queued\":\n                    cur.classList.add(\"queued\");\n                    break;\n                case \"walls\":\n                    cur.classList.add(\"wall\");\n                    break;\n                default: break;\n            }\n        }\n\n    }\n    animateNodes(type, pathAnimate = () => {}){\n        // for(let i=0;i<this.nodesToAnimate.length;i++)\n        //     this.animateNode(i);\n        //     // setTimeout(()=>this.animateNode(i), i*this.speed);\n        // debugger\n        window.timeouts.push(\n        setTimeout(() => this.animateNode(0, type, pathAnimate), this.speed)\n        )\n    }\n    animateNode(idx,type, pathAnimate){\n        if(!(pathAnimate instanceof Function)) debugger;\n        if(idx >= this.nodesToAnimate.length) return pathAnimate();\n        let cur = this.nodesToAnimate[idx];\n        if (!cur) debugger\n        cur = document.getElementById(`${cur[0]}-${cur[1]}`);\n        switch(type){\n            case \"current\":\n                cur.classList.remove(\"unvisited\");\n                cur.classList.add(\"current\");\n                break;\n            case \"queued\":\n                cur.classList.remove(\"current\");\n                cur.classList.add(\"queued\");\n                break;\n            case \"visited\":\n                cur.classList.remove(\"queued\");\n                cur.classList.add(\"visited\");\n                break;\n            case \"path\":\n                cur.classList.remove(\"visited\");\n                cur.classList.add(\"path\");\n                break;\n            case \"walls\":\n                cur.classList.add(\"wall\");\n                break;\n            default:\n                break;\n        }\n        window.timeouts.push(\n        setTimeout(()=>this.animateNode(idx+1,type, pathAnimate),this.speed)\n        )\n    }\n}\n\nmodule.exports = {\n    gridAnimations\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/animations/gridAnimations.js?");

/***/ }),

/***/ "./src/lib/util/board.js":
/*!*******************************!*\
  !*** ./src/lib/util/board.js ***!
  \*******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {generateInt} = __webpack_require__(/*! ./mathUtil */ \"./src/lib/util/mathUtil.js\");\nconst {watchSpeed} = __webpack_require__(/*! ./navbar */ \"./src/lib/util/navbar.js\");\n\nclass Board {\n    constructor(density){\n        this.browserWidth = 2000;\n        this.mainGrid = document.getElementById(\"mainGrid\");\n        // debugger\n        this.genBoard(density);\n        this.density = density;\n        this.allEventListeners();\n        this.instant = false;\n        this.path = true;\n    }\n    getSize(density){\n        this.size = density === \"normal\" ? [25, 50] :\n            // density === \"dense\" ? [55, 120] : [5, 5];\n            density === \"dense\" ? [55, 120] : [12, 25];\n    }\n    genBoard(density) {\n        this.density = density;\n        this.getSize(density);\n        // debugger\n        const [h,w] = this.size;\n        // const mainGrid = document.getElementById(\"mainGrid\");\n        this.mainGrid.innerHTML = '';\n        const table = document.createElement(\"table\");\n        table.id = \"board\";\n        const tbody = document.createElement(\"tbody\");\n        table.appendChild(tbody);\n        for(let i=0;i<h;i++){\n            let trow = document.createElement(\"tr\");\n            trow.id = `row_${i}`;\n            for(let j=0;j<w;j++){\n                let td = document.createElement(\"td\");\n                td.id = `${i}-${j}`;\n                td.classList.add(\"unvisited\")\n                td.classList.add(density)\n                trow.appendChild(td);\n            }\n            tbody.appendChild(trow);\n        }\n        this.mainGrid.appendChild(table);\n        this.initStartStop(density);\n        this.wallGen(null,true)\n        if(this.instant)\n            this.watchInstant()\n        // return mainGrid;\n    }\n    allEventListeners() {\n        this.watchWall(this.mainGrid);\n        this.watchClearWall();\n        this.watchStartStop(this.mainGrid);\n        this.watchVisualize();\n        this.watchClearBoard();\n        this.watchClearPath();\n        this.watchMaze();\n        this.watchAlgo();\n        this.watchDensity();\n        this.watchEnter();\n    }\n    getSpeed() {\n        const average = document.getElementById(\"speed-average\").classList.contains(\"selected\");\n        if (average) return \"average\";\n        const slow = document.getElementById(\"speed-slow\").classList.contains(\"selected\");\n        if (slow) return \"slow\";\n        return \"fast\";\n    }\n    getAlgo() {\n        const bfs = document.getElementById(\"bfs\").classList.contains(\"selected\");\n        if (bfs) return \"bfs\";\n        const dfs = document.getElementById(\"dfs\").classList.contains(\"selected\");\n        if (dfs) return \"dfs\";\n        return \"dijkstra\"\n    }\n    getStartSymbol() {\n        const symbols = {\n            \"bfs\": '<i class=\"fas fa-star-of-life\"></i>',\n            \"dfs\": '<i class=\"fas fa-angle-right\"></i>',\n            \"dijkstra\": '<i class=\"fas fa-project-diagram\"></i>' \n        }\n        return symbols[this.getAlgo()];\n    }\n    convert2Insta(){\n        const visited = document.getElementsByClassName(\"visited\");\n        // debugger\n        this.pruneQueue();\n        while (visited.length > 0) {\n            visited[0].classList.add(\"instantvisited\");\n            visited[0].classList.remove(\"visited\");\n        }\n        const path = document.getElementsByClassName(\"path\");\n        // debugger\n        while (path.length > 0) {\n            path[0].classList.add(\"instantpath\");\n            path[0].classList.remove(\"path\");\n        }\n        const current = document.getElementsByClassName(\"current\");\n        // debugger\n        while (current.length > 0) {\n            current[0].classList.remove(\"current\");\n        }\n        this.instant = true;\n        this.path = true;\n\n    }\n    pruneQueue(){\n        // const visited = document.getElementsByClassName(\"visited\");\n        const queueVisited = document.getElementsByClassName(\"queued visited\");\n        while(queueVisited.length > 0) queueVisited[0].classList.remove(\"queued\");\n        const queuePath = document.getElementsByClassName(\"queued path\");\n        while(queuePath.length > 0) queuePath[0].classList.remove(\"queued\");\n    }\n    isStartStop(el) {\n        const start = document.getElementsByClassName(\"start\")[0];\n        const stop = document.getElementsByClassName(\"stop\")[0];\n        if(!(start instanceof Node)) debugger;\n        if(!(stop instanceof Node)) debugger;\n        return (start ? start.contains(el):false) || (stop ? stop.contains(el):false);\n    }\n    toggleWall(e) {\n        // debugger\n        const notSt = !this.isStartStop(e.target);\n        if(e.type === \"mousedown\" && notSt) e.currentTarget.classList.add(\"mouse_wall\");\n        if(e.target.tagName === \"TD\" && e.currentTarget.classList.contains(\"mouse_wall\")) {\n            if(e.target.classList.contains(\"wall\")){\n                e.target.classList.remove(\"wall\");\n                // e.target.classList.add(\"unvisited\");\n            } else if(notSt){\n                e.target.classList.add(\"wall\");\n                // e.target.classList.remove(\"unvisited\");\n                // e.target.classList.remove(\"visited\");\n            }\n        }\n    }\n    watchClearWall() {\n        const button = document.getElementById(\"clearWalls\");\n        button.addEventListener(\"click\",(e) => this.clearWalls(e))\n    }\n    watchClearBoard() {\n        const button = document.getElementById(\"clearBoard\");\n        button.addEventListener(\"click\",(e) => this.clearBoard(e))\n    }\n    watchClearPath() {\n        const button = document.getElementById(\"clearPath\");\n        button.addEventListener(\"click\",(e) => {\n            // debugger\n            if(!this.instant) return;\n            const clearPathBTN = document.getElementById(\"clearPath\");\n                clearPathBTN.innerText = \"Clear Path\";\n                this.clearVisited(e)\n                this.clearPath(e)\n                this.instant = false;\n        })\n    }\n    stopAnimations(){\n        let i = 0;\n        while(i < window.timeouts.length){\n            clearTimeout(window.timeouts[i++]);\n            // debugger\n        }\n    }\n    clearWallMenu(){\n        document.getElementById(\"no-maze\").classList.add(\"selected\");\n        document.getElementById(\"recursive-division\").classList.remove(\"selected\");\n        document.getElementById(\"random-maze\").classList.remove(\"selected\");\n\n    }\n    clearMisc(){\n        const current = document.getElementsByClassName(\"current\");\n        while (current.length > 0) {\n            current[0].classList.add(\"unvisited\");\n            current[0].classList.remove(\"current\");\n        }\n        const queued = document.getElementsByClassName(\"queued\");\n        while (queued.length > 0) {\n            queued[0].classList.add(\"unvisited\");\n            queued[0].classList.remove(\"queued\");\n        }\n    }\n    clearWalls(e, clearMenu = true) {\n        // this.stopAnimations();\n        // this.clearMisc();\n        const walls = document.getElementsByClassName(\"wall\");\n        if(clearMenu)\n            this.clearWallMenu();\n        while(walls.length > 0){\n            walls[0].classList.add(\"unvisited\");\n            walls[0].classList.remove(\"wall\");\n        }\n        // debugger\n        if (this.instant)\n            this.watchInstant();\n    }\n    clearVisited(e) {\n        const visited = document.getElementsByClassName(\"visited\");\n        while(visited.length > 0){\n            visited[0].classList.add(\"unvisited\");\n            visited[0].classList.remove(\"visited\");\n        }\n        const instantvisited = document.getElementsByClassName(\"instantvisited\");\n        // debugger\n        while(instantvisited.length > 0){\n            instantvisited[0].classList.add(\"unvisited\");\n            instantvisited[0].classList.remove(\"instantvisited\");\n        }\n        const queued = document.getElementsByClassName(\"queued\");\n        // debugger\n        while(queued.length > 0){\n            queued[0].classList.add(\"unvisited\");\n            queued[0].classList.remove(\"queued\");\n        }\n    }\n    clearPath(e, newClass = \"unvisited\") {\n        const clearPathBTN = document.getElementById(\"clearPath\");\n        // this.instant = false;\n        // debugger\n        // console.log(\"FLAG\")\n        const path = document.getElementsByClassName(\"path\");\n        while(path.length > 0){\n            path[0].classList.add(newClass);\n            path[0].classList.remove(\"path\");\n        }\n        const instantpath = document.getElementsByClassName(\"instantpath\");\n        while(instantpath.length > 0){\n            instantpath[0].classList.add(newClass);\n            instantpath[0].classList.remove(\"instantpath\");\n        }\n    }\n    clearBoard(e){\n        // debugger\n        this.stopAnimations();\n        this.instant = false;\n        this.clearPath(e,\"unvisited\");\n        this.clearVisited(e);\n        this.clearWalls(e);\n        this.clearMisc(e);\n    }\n    watchWall(grid) {\n        grid.addEventListener(\"mousedown\",(e) => this.toggleWall(e))\n        grid.addEventListener(\"mouseover\",(e) => this.toggleWall(e))\n        grid.addEventListener(\"mouseup\", (e) => {\n            e.currentTarget.classList.remove(\"mouse_wall\");\n            if (this.instant)\n                this.watchInstant();\n        })\n    }\n    initStartStop(density){\n        const [h, w] = this.size;\n        let starttd = document.getElementById(`${generateInt(h)}-${generateInt(w)}`); if (starttd.classList.length === 0) return;\n        while(!starttd.classList.contains(\"unvisited\")) \n            starttd = document.getElementById(`${generateInt(h)}-${generateInt(w)}`);\n        this.addStartStop(starttd);\n        starttd.classList.add(`${density}-start`)\n        //\n        let stoptd = document.getElementById(`${generateInt(h)}-${generateInt(w)}`); if (stoptd.classList.length === 0) return;\n        while ((!stoptd.classList.contains(\"unvisited\")) || stoptd.classList.contains(\"start\"))\n            stoptd = document.getElementById(`${generateInt(h)}-${generateInt(w)}`);\n        //\n        this.addStartStop(stoptd,\"stop\");\n        stoptd.classList.add(`${density}-stop`)\n    }\n    watchStartStop(grid){\n        grid.addEventListener(\"mousedown\", (e) => this.moveStartStop(e))\n        grid.addEventListener(\"mouseover\", (e) => this.moveStartStop(e))\n        grid.addEventListener(\"mouseup\", (e) => {\n            e.currentTarget.classList.remove(\"mouse_start\");\n            e.currentTarget.classList.remove(\"mouse_stop\");\n        })\n    }\n    moveStartStop(e) {\n        const isSt = this.isStartStop(e.target);\n        // debugger\n        const start = document.getElementsByClassName(\"start\")[0];\n        const stop = document.getElementsByClassName(\"stop\")[0];\n        if (e.type === \"mousedown\" && isSt){\n            if (start.contains(e.target)) e.currentTarget.classList.add(\"mouse_start\");\n            if (stop.contains(e.target)) e.currentTarget.classList.add(\"mouse_stop\");\n        }\n        if (!(e.target.tagName === \"TD\" && !e.target.classList.contains(\"wall\"))) return;\n        if (e.currentTarget.classList.contains(\"mouse_start\")) {\n            this.removeStartStop(start);\n            this.addStartStop(e.target);\n            if (this.instant)\n                this.watchInstant();\n        }\n        if (e.currentTarget.classList.contains(\"mouse_stop\")) {\n            this.removeStartStop(stop,\"stop\");\n            this.addStartStop(e.target,\"stop\")\n            if(this.instant)\n                this.watchInstant();\n        }\n    }\n    addStartStop(start, str = \"start\"){\n        // start.className = '';\n        const key = document.getElementsByClassName(`key-${str}`)[0]\n        debugger\n        start.classList.add(str);\n        start.innerHTML = str === \"start\" ? this.getStartSymbol() : '<i class=\"far fa-dot-circle\"></i>'\n        key.innerHTML = start.innerHTML;\n        start.classList.add(`${this.density}-${str}`)\n    }\n    removeStartStop(start, str = \"start\"){\n        // debugger\n        if(start){\n            start.innerHTML = '';\n            start.classList.add(\"unvisited\"); start.classList.remove(str);\n            start.classList.remove(`${this.density}-${str}`)\n        }\n    }\n}\n\n\nmodule.exports = {\n    Board\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/util/board.js?");

/***/ }),

/***/ "./src/lib/util/game.js":
/*!******************************!*\
  !*** ./src/lib/util/game.js ***!
  \******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Board } = __webpack_require__(/*! ./board */ \"./src/lib/util/board.js\");\nconst { generateInt } = __webpack_require__(/*! ./mathUtil */ \"./src/lib/util/mathUtil.js\");\n\nclass Game extends Board {\n    constructor(size, algoList, gridAnimations) {\n        super(size);\n        this.algoList = algoList;\n        this.gridAnimations = gridAnimations;\n    }\n    watchVisualize() {\n        document.getElementById(\"visualize\").addEventListener(\"click\", e => {\n            this.run();\n        })\n    }\n    watchEnter() {\n        document.addEventListener(\"keypress\", e => {\n            this.run();\n        })\n    }\n    run(){\n        this.instant = false;\n        this.stopAnimations(); this.clearMisc();\n        document.getElementById(\"clearPath\").innerText = \"Clear Path\"\n        const { nodesToAnimate, queueToAnimate, backTrace } = this.execute();\n        this.animateVisualize(this.getSpeed(), nodesToAnimate, queueToAnimate, backTrace);\n    }\n    watchInstant(){\n        const { nodesToAnimate, queueToAnimate, backTrace } = this.execute();\n        this.animateInstant(nodesToAnimate, queueToAnimate, backTrace);\n    }\n    execute(){\n        this.clearPath(null, \"instantvisited\", false);\n        this.clearVisited();\n        const nodesToAnimate = [];\n        const queueToAnimate = [];\n        const backTrace = [];\n        const algo = new this.algoList[this.getAlgo()](this.size)\n        algo.execute(nodesToAnimate, queueToAnimate, backTrace);\n        debugger\n        this.backTrace = backTrace;\n        return {nodesToAnimate, queueToAnimate,backTrace};\n    }\n    animateInstant(nodesToAnimate, queueToAnimate, backTrace){\n        const gridA = new this.gridAnimations(\"fast\", nodesToAnimate);\n        const gridC = new this.gridAnimations(\"fast\", queueToAnimate);\n        const gridB = new this.gridAnimations(\"fast\", backTrace);\n        gridC.animateInstant(\"queued\");\n        gridA.animateInstant(\"instantvisited\");\n        debugger\n        gridB.animateInstant(\"instantpath\");\n    }\n    animateWalls(nodesToAnimate, instant = true){\n        const gridA = new this.gridAnimations(\"fast\", nodesToAnimate);\n        if(instant){\n            gridA.animateInstant(\"walls\");\n            if (this.instant)\n                this.watchInstant();\n        }else{\n            gridA.animateNodes(\"walls\", ()=>{\n                if (this.instant)\n                    this.watchInstant();\n            });\n        }\n    }\n    animatePath() {\n        this.path = true;\n        const gridB = new this.gridAnimations(this.getSpeed(), this.backTrace);\n        window.timeouts.push(\n            setTimeout(() => {\n            gridB.animateNodes(\"path\",\n                () => setTimeout(() => this.convert2Insta(), 2000));\n        }\n        )\n        )\n    }\n    animateVisualize(speed, nodesToAnimate, queueToAnimate, backTrace){\n        const gridA = new this.gridAnimations(speed, nodesToAnimate);\n        const gridC = new this.gridAnimations(speed, queueToAnimate);\n        const gridB = new this.gridAnimations(speed, backTrace);\n        window.timeouts.push(setTimeout(()=>gridA.animateNodes(\"current\")));\n        // debugger\n        window.timeouts.push(setTimeout(() => gridC.animateNodes(\"queued\"), gridA.speed));\n        window.timeouts.push(\n        setTimeout(() => {\n            gridA.animateNodes(\"visited\",\n                () => gridB.animateNodes(\"path\", () => setTimeout(() => this.convert2Insta(), 2000)));\n        }, 10 * gridA.speed)\n        )        \n    }\n    watchDensity(){\n        const density = document.getElementById(\"density\");\n        density.addEventListener(\"click\", e => {\n            const newDense = this.getDensity(e);\n            debugger\n            // this.instant = false;\n            if(newDense) this.genBoard(newDense);\n\n        })\n    }\n    getDensity(e){\n        const dense = document.getElementById(\"dense\");\n        const sparse = document.getElementById(\"sparse\");\n        const normal = document.getElementById(\"normal\");\n        const denseTd = dense.classList.contains(\"selected\");\n        const sparseTd = sparse.classList.contains(\"selected\");\n        const normalTd = normal.classList.contains(\"selected\");\n        // debugger\n        if (!dense.contains(e.target) && !sparse.contains(e.target) && !normal.contains(e.target) ) return false;\n        if (denseTd) return \"dense\";\n        if (sparseTd) return \"sparse\";\n        if (normalTd) return \"normal\";\n    }\n    genRandomWalls(){\n        const [ h, w ] = this.size;\n        const n = h*w;\n        let wCnt = n/2;\n        // let wCnt = generateInt(n);\n        let x,y;\n        let cur; let nodes = [];\n        // debugger\n        while(wCnt > 0){\n            [x,y] = [generateInt(h),generateInt(w)];\n            cur = document.getElementById(`${x}-${y}`);\n            if(cur.classList.contains(\"unvisited\") && !this.isStartStop(cur)){\n                wCnt--;\n                nodes.push([x,y]);\n            }\n        }\n        this.animateWalls(nodes);\n    }\n    wallGen(e, instant = false){\n        const none = document.getElementById(\"no-maze\");\n        const rM = document.getElementById(\"random-maze\");\n        // debugger\n        if ((instant || rM.contains(e.target)) && rM.classList.contains(\"selected\")){\n            this.clearWalls(e,false);\n            window.timeouts.push(\n                setTimeout(() => \n            this.genRandomWalls(), 0)\n            )\n        }\n        if ((instant || none.contains(e.target)) && none.classList.contains(\"selected\")){\n            this.clearWalls(e,false);\n        }\n    }\n    watchMaze(){\n        const maze = document.getElementById(\"maze\");\n        maze.addEventListener(\"click\",e=>{\n            // debugger\n            this.wallGen(e);\n        })\n    }\n    watchAlgo(){\n        const maze = document.getElementById(\"algo\");\n        maze.addEventListener(\"click\",e=>{\n            const bfsT = document.getElementById(\"bfs\").contains(e.target);\n            const dfsT = document.getElementById(\"dfs\").contains(e.target);\n            const dijkstraT = document.getElementById(\"dijkstra\").contains(e.target);\n            if(bfsT || dfsT || dijkstraT){\n                document.getElementsByClassName(\"start\")[0].innerHTML = this.getStartSymbol();\n                document.getElementsByClassName(\"key-start\")[0].innerHTML = this.getStartSymbol();\n                if(this.instant) this.watchInstant();\n                // else this.run();\n            }\n        })\n    }\n}\n\n\nmodule.exports = {\n    Game\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/util/game.js?");

/***/ }),

/***/ "./src/lib/util/mathUtil.js":
/*!**********************************!*\
  !*** ./src/lib/util/mathUtil.js ***!
  \**********************************/
/*! namespace exports */
/*! export generateInt [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getQMin [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getQStop [provided] [no usage info] [missing usage info prevents renaming] */
/*! export shuffle [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"generateInt\": () => /* binding */ generateInt,\n/* harmony export */   \"getQStop\": () => /* binding */ getQStop,\n/* harmony export */   \"getQMin\": () => /* binding */ getQMin,\n/* harmony export */   \"shuffle\": () => /* binding */ shuffle\n/* harmony export */ });\nconst generateInt = (int) => Math.floor(Math.random() * int); \n\nconst getQStop = (queue) => {\n    // debugger\n    let keys = Object.keys(queue);\n    for(let pos of keys){\n        if (queue[pos] === \"s\") return pos.split(\",\").map(el => parseInt(el));\n    }\n    return null;\n}\nconst getQMin = (queue) => {\n    let min = Number.MAX_SAFE_INTEGER;\n    let res = undefined;\n    Object.keys(queue).forEach(pos => {\n        if(queue[pos] < min){\n            res = pos;\n            min = queue[pos];\n        }\n    })\n    // debugger\n    delete queue[res];\n    return res.split(\",\").map(el => parseInt(el));\n}\n\nconst shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/util/mathUtil.js?");

/***/ }),

/***/ "./src/lib/util/modal.js":
/*!*******************************!*\
  !*** ./src/lib/util/modal.js ***!
  \*******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 27:0-14 */
/***/ ((module) => {

eval("const watchAll = () => {\n    watchOutside();\n}\nconst watchOutside = () => {\n    document.addEventListener(\"click\", (e) => {\n        debugger\n        let outside = false;\n        const modal_content = document.getElementsByClassName(\"modal-content\");\n        for(let mc of modal_content){\n            if(!mc.contains(e.target)){\n                outside = true;\n                break;\n            }\n        }\n\n        if (outside) {\n            clearModal();\n            // debugger\n        }\n    })\n}\nconst clearModal = () => {\n    for(let el of document.getElementsByClassName(\"modal\")){\n        el.style.display = \"none\";\n    }\n}\nmodule.exports = {\n    watchAll\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/util/modal.js?");

/***/ }),

/***/ "./src/lib/util/navbar.js":
/*!********************************!*\
  !*** ./src/lib/util/navbar.js ***!
  \********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/***/ ((module) => {

eval("const clearDropdown = () => {\n    const clicked = document.getElementsByClassName(\"clicked\");\n    while (clicked.length > 0) {\n        for (let i of clicked[0].getElementsByClassName(\"dropdown-content\")) i.classList.remove(\"show\");\n        clicked[0].classList.remove(\"clicked\");\n    }\n}\n\nconst toggleDropdown = (e) => {\n    const isClicked  = e.currentTarget.classList.contains(\"clicked\");\n    clearDropdown();\n    if(!isClicked){\n        e.currentTarget.classList.add(\"clicked\");\n        for(let i of e.currentTarget.getElementsByClassName(\"dropdown-content\")) i.classList.add(\"show\");\n    }\n}\nconst watchDropdown = () => {\n    const dropdown = document.getElementsByClassName(\"dropdown\");\n    for(let d of dropdown)\n        d.addEventListener(\"click\", (e) => toggleDropdown(e))\n    document.addEventListener(\"click\", (e) => {\n    if (!document.getElementById(\"global-nav\").contains(e.target)){\n        clearDropdown();\n        // debugger\n    }\n    })\n}\n\nconst watchMaze = () => {\n    const maze = document.getElementById(\"maze\");\n    const none = document.getElementById(\"no-maze\");\n    const rD = document.getElementById(\"recursive-division\");\n    const rM = document.getElementById(\"random-maze\");\n    maze.addEventListener(\"click\", e => {\n        // debugger\n        const noneT = none.contains(e.target);\n        const rDT = rD.contains(e.target);\n        const rMT = rM.contains(e.target);\n        if (noneT || rDT || rMT) { none.classList.remove(\"selected\"); rD.classList.remove(\"selected\"); rM.classList.remove(\"selected\"); }\n        if (noneT) none.classList.add(\"selected\");\n        if (rDT) rD.classList.add(\"selected\");\n        if (rMT) rM.classList.add(\"selected\");\n    })\n}\nconst watchDensity = () => {\n    const maze = document.getElementById(\"density\");\n    const none = document.getElementById(\"dense\");\n    const rD = document.getElementById(\"normal\");\n    const rM = document.getElementById(\"sparse\");\n    maze.addEventListener(\"click\", e => {\n        // debugger\n        const noneT = none.contains(e.target);\n        const rDT = rD.contains(e.target);\n        const rMT = rM.contains(e.target);\n        if (noneT || rDT || rMT) { none.classList.remove(\"selected\"); rD.classList.remove(\"selected\"); rM.classList.remove(\"selected\"); }\n        if (noneT) none.classList.add(\"selected\");\n        if (rDT) rD.classList.add(\"selected\");\n        if (rMT) rM.classList.add(\"selected\");\n    })\n}\nconst watchAlgo = () => {\n    const algo = document.getElementById(\"algo\");\n    const bfs = document.getElementById(\"bfs\");\n    const dfs = document.getElementById(\"dfs\");\n    const dijkstra = document.getElementById(\"dijkstra\");\n    algo.addEventListener(\"click\", e => {\n        const bfsT = bfs.contains(e.target);\n        const dfsT = dfs.contains(e.target);\n        const dijT = dijkstra.contains(e.target);\n        // debugger\n        const header = document.getElementById(\"algo-title\");\n        changeAlgo({ bfsT, dfsT, dijT,header });\n    })\n}\nconst changeAlgo = ({bfsT,dfsT,dijT,header}) => {\n    if (bfsT || dfsT || dijT) { bfs.classList.remove(\"selected\"); dfs.classList.remove(\"selected\"); dijkstra.classList.remove(\"selected\"); }\n    if (bfsT) { bfs.classList.add(\"selected\"); header.innerText = \"Breadth-First Search\" }\n    if (dfsT) { dfs.classList.add(\"selected\"); header.innerText = \"Depth-First Search\" }\n    if (dijT) { dijkstra.classList.add(\"selected\"); header.innerText = \"Dijkstra's Algorithm\" }\n\n}\nconst updateAlgo = ({bfs,dfs,dijkstra,header}) => {\n    if(bfs.classList.contains(\"selected\")) header.innerText = \"Breadth-First Search\" \n    if(dfs.classList.contains(\"selected\")) header.innerText = \"Depth-First Search\" \n    if(dijkstra.classList.contains(\"selected\")) header.innerText = \"Dijkstra's Algorithm\" \n}\nconst watchSpeed = () => {\n    const speed = document.getElementById(\"speed\");\n    const fast = document.getElementById(\"speed-fast\");\n    const average = document.getElementById(\"speed-average\");\n    const slow = document.getElementById(\"speed-slow\");\n    const caret = `<i class=\"fas fa-angle-down\"></i>`\n    speed.addEventListener(\"click\",e=>{\n        // debugger\n        const f = fast.contains(e.target); const a = average.contains(e.target); const s = slow.contains(e.target);\n        if(f || a || s) {fast.classList.remove(\"selected\"); average.classList.remove(\"selected\"); slow.classList.remove(\"selected\");}\n        if (f) {\n            speed.getElementsByTagName(\"p\")[0].innerHTML = `Speed: Fast${caret}`;\n            fast.classList.add(\"selected\");\n        }\n        if (a) {\n            speed.getElementsByTagName(\"p\")[0].innerHTML = `Speed: Average${caret}`;\n            average.classList.add(\"selected\");\n        }\n        if (s) {\n            speed.getElementsByTagName(\"p\")[0].innerHTML = `Speed: Slow${caret}`;\n            slow.classList.add(\"selected\");\n        }\n    })\n}\n\nconst watchAll = () => {\n    const bfs = document.getElementById(\"bfs\");\n    const dfs = document.getElementById(\"dfs\");\n    const dijkstra = document.getElementById(\"dijkstra\");\n    const header = document.getElementById(\"algo-title\");\n    updateAlgo({bfs,dfs,dijkstra,header});\n    watchDropdown();\n    watchSpeed();\n    watchAlgo();\n    watchMaze();\n    watchDensity();\n}\n\nmodule.exports = {\n    watchAll\n}\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/lib/util/navbar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_require__ */
eval("const NavBar = __webpack_require__(/*! ./lib/util/navbar */ \"./src/lib/util/navbar.js\");\nconst {Game} = __webpack_require__(/*! ./lib/util/game */ \"./src/lib/util/game.js\")\nconst {BFS} = __webpack_require__(/*! ./lib/algos/bfs */ \"./src/lib/algos/bfs.js\")\nconst {DFS} = __webpack_require__(/*! ./lib/algos/dfs */ \"./src/lib/algos/dfs.js\")\nconst { Dijkstra } = __webpack_require__(/*! ./lib/algos/dijkstra */ \"./src/lib/algos/dijkstra.js\");\nconst {gridAnimations} = __webpack_require__(/*! ./lib/animations/gridAnimations */ \"./src/lib/animations/gridAnimations.js\");\nconst Modal = __webpack_require__(/*! ./lib/util/modal */ \"./src/lib/util/modal.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    NavBar.watchAll();\n    Modal.watchAll();\n    window.timeouts = [];\n    // const size = [25, 50];\n    const denseTd = document.getElementById(\"dense\").classList.contains(\"selected\");\n    const sparseTd = document.getElementById(\"sparse\").classList.contains(\"selected\");\n    const size = denseTd ? \"dense\" : sparseTd ? \"sparse\" : \"normal\";\n    // const size = [5, 5];\n    const algos = {\"bfs\": BFS, \"dfs\": DFS, \"dijkstra\": Dijkstra};\n    const board = new Game(size,algos, gridAnimations);\n})\n\n//# sourceURL=webpack://pathfinding_visualizer/./src/index.js?");
})();

/******/ })()
;